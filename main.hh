#ifndef PEERSTER_MAIN_HH
#define PEERSTER_MAIN_HH

#include <QDialog>
#include <QTextEdit>
#include <QLineEdit>
#include <QUdpSocket>
#include <QKeyEvent>
#include <QDataStream>
#include <QByteArray>
#include <QVariant>
#include <QPair>
#include <QList>
#include <QTimer>
#include <QHostInfo>



class TextEntryWidget : public QTextEdit
{
  Q_OBJECT



public:
  TextEntryWidget(QWidget *parent);

protected:
  void keyPressEvent ( QKeyEvent* e);

signals:
  void returnPressed();

};

class ChatDialog : public QDialog
{
	Q_OBJECT

public:
	ChatDialog();

public slots:
	void gotReturnPressed();
  void gotNewMessage(const QString& s);
  void gotAddPeer();

signals:
  void sendMessage (const QString& s);
  void addPeer (const QString& s);

private:
	QTextEdit *textview;
	TextEntryWidget *textline;
  QLineEdit *peerAdder;

};

class NetSocket : public QUdpSocket
{
	Q_OBJECT

public:
	NetSocket();

	// Bind this socket to a Peerster-specific default port.
	bool bind();

public slots:
  // This function communicates a new message from the dialog.
  void gotSendMessage(const QString &s);

  // This function reads data from the network. It is connected to 
  // QUdpSocket's readyRead signal.
  void readData();

  // This function is used to process a time-out generated by the 
  // timer for rumormongering.
  void processTimeout();

  // This function processes a time-out generated by the timer
  // for antientropy.
  void processAntiEntropyTimeout();

  void lookedUpHost(const QHostInfo& host);

  void addHost(const QString& s);

signals:
  // This signal is connected to a display method in the dialog to 
  // display new messages received over the network.
  void receivedMessage(const QString& data);

  // This signal is starts the rumor timer while rumormongering.
  void startRumorTimer(int msec);
  


private:
  // We call this function when the node receives a new rumor from either the dialog or the network.
  // Only this method updates the vectorClock, messages.
  // Only this method sets anythingHot to true.
  void newRumor(const QVariantMap& message,const QHostAddress& senderAddress,const quint16& port);

  // We call this function when we receive a new status message.
  // Both anti-entropy and rumormongering are handled. 
  // This function uses the "anythingHot" flag to rumormonger if it is true.
  // This function may set "anythingHot" to false if it stops rumormongering.
  void newStatus(const QVariantMap& message,
			    const QHostAddress& senderAddress, 
			    const quint16& port);


  // This function serlializes the current state of the vectorClock 
  // and sends to address:port.
  void sendStatusMessage(QHostAddress address, quint16 port);  


  // This function is used to compare two vectors.
  //
  // It only checks to see if map1 contains an index whose value
  // is greater than map2's corresponding index.
  //
  // If we find an index, required is set to its value.
  QString tryFindFirstBigger(const QVariantMap& map1,const QVariantMap& map2, int *required);
  

  // randomNeighbor: Finds a random neighbor "statefully".
  // 
  // Internally contains a set of neighbors already chosen. Choses only from
  // the set of those not yet chosen.
  //
  // excludeNeighbor: explicitly add a neighbor to the set of chosen ports. This
  // may be used when we want to exclude a neighbor of rumormongering.
  //
  // cleanUpVisited: empty the set and start over.
  int randomNeighbor();
  void cleanUpVisited();
  void excludeNeighbor(quint32 port);

  
  bool checkIfWellFormedIP(const QString& addr);
  
  bool checkVector(const QVariantMap& vect);
  
  QByteArray *EMPTY_BYTE_ARRAY;
  
  int myPortMin, myPortMax;
  QHostAddress *localhost;
  QPair<QHostAddress, quint16> *me;
  QVariant *myNameVariant;
  QString myNameString;
  
  QString myIP;
  quint16 myPort;
  
  QTimer *rumorTimer;
  QTimer *antiEntropyTimer;
  QMap<QString, QList<QByteArray> > *messages;
  
  QVariantMap hotMessage;
  QSet<quint32> *neighborsVisited;
  bool anythingHot;
  
  QMap<QString, QList<quint16> > *pendingLookups;
  QList<QPair<QHostAddress, quint16> > *neighbors;
  QVariantMap *vectorClock;
  quint32 messageIdCounter;
  
};

#endif // PEERSTER_MAIN_HH
